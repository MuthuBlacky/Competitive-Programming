class SegmentTree{
public:
    vector<int> seg;
    vector<int> array;
//constructor
  SegmentTree(vector<int> &ar){
   int n = ar.size();
   seg.resize(4*n + 1);
   array = ar;
   }

void built(int ind,int low,int high){
   if(low == high){
     seg[ind] = array[low];
     return;
    }
   int mid = (low + high)>>1;
   built(2*ind+1,low,mid);
   built(2*ind+2,mid+1,high);
   seg[ind] = min(seg[2 * ind + 1],seg[2 * ind + 2]);
 }
int query(int ind,int low,int high,int l,int r){
//no overlap [l r low high] or [low high l r]
//complete overlap [low l r high]
  if(r < low || high < l)  return INT_MAX; 
 if(low >= l && high <= r) return seg[ind];
  int mid = (low + high)>>1;
  int left = query(2*ind+1,low,mid,l,r);
  int right = query(2*ind+2,mid+1,high,l,r);
  return min(left,right);
  }
void update(int ind,int low,int high,int upInd,int val){
  if(low == high){
     seg[ind] = val;
     return;
  }
  int mid = (low + high)>>1;
  if(upInd <= mid) update(2*ind+1,low,mid,upInd,val);
  else update(2*ind+2,mid+1,high,upInd,val);
  seg[ind] = min(seg[2*ind+1],seg[2*ind+2]);
 }
};