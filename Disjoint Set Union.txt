class Disjoint{
  private:
  vector<int> rank;
  vector<int> parent;
  vector<int> size;
  public:
  Disjoint(int n){
    rank.resize(n+1,0);
    parent.resize(n+1,0);
    size.resize(n+1,1);
    for(int i = 0;i<n+1;i++) parent[i] = i;
  }
int getNodeSize(int node){
    return size[node];
}
int findParent(int par){
   if(par == parent[par]) return par; 
   return parent[par] = findParent(parent[par]);
}
bool isSameComponent(int u,int v){
  return findParent(u) == findParent(v);
}
void unionBySize(int u,int v){
     int ulp_u = findParent(u);
     int ulp_v = findParent(v); 
     if(ulp_v == ulp_u) return;
     if(size[ulp_v] > size[ulp_u]){
         parent[ulp_u] = ulp_v;
         size[ulp_v] += size[ulp_u];
     }
     else{
         parent[ulp_v] = ulp_u;
         size[ulp_u] += size[ulp_v];
     }
}
void unionByRank(int u,int v){
   int ulp_u = findParent(u);
   int ulp_v = findParent(v);
   if(ulp_u == ulp_v) return;
   if(rank[ulp_u] > rank[ulp_v]){
     parent[ulp_v] = ulp_u;
   }
   else if(rank[ulp_v] > rank[ulp_u]){
    parent[ulp_u] = ulp_v;
   }
   else{
      parent[ulp_u] = ulp_v;
      rank[ulp_v]++;
   }
}
};